name: Continuous Integration

on:
  push:
    branches:
    - master

jobs:
  coverage:
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v4

    - uses: ./.github/actions/apt-install

    - uses: ./.github/actions/conan

    - uses: hendrikmuhs/ccache-action@v1.2

    - name: Configure
      env:
        VERBOSE: "1"
      run: >-
           cmake -B build/coverage
           -DCMAKE_TOOLCHAIN_FILE=conan/conan_toolchain.cmake
           -DCMAKE_BUILD_TYPE=Release
           -DLsPlex_DEV=ON
           -DLsPlex_USE_COVERAGE=ON
           -DLsPlex_USE_CCACHE=ON

    - name: Build
      env:
        VERBOSE: "1"
      run: |
           cmake --build build/coverage -j 2

    - name: Test
      working-directory: build/coverage
      env:
        VERBOSE: "1"
      run: |
           ctest --output-on-failure --no-tests=error -j 2
           ./lsplex
           ./lsplex -l martian || true
           ./lsplex -l en
           ./lsplex -l de
           ./lsplex -l es
           ./lsplex -l fr
           ./lsplex --help
           ./lsplex --version

    - name: Process coverage info
      run: >-
           lcov -c -o build/coverage/coverage.info -d build/coverage --include "*"

    - name: Submit to codecov.io
      uses: codecov/codecov-action@v4
      with:
        file: build/coverage/coverage.info
        token: ${{ secrets.CODECOV_TOKEN }}

  sanitize:
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v4

    - uses: ./.github/actions/apt-install

    - uses: ./.github/actions/conan

    - uses: hendrikmuhs/ccache-action@v1.2

    - name: Configure
      env:
        VERBOSE: "1"
      run: >-
           cmake -B build/sanitize
           -DCMAKE_TOOLCHAIN_FILE=conan/conan_toolchain.cmake
           -DCMAKE_BUILD_TYPE=Release
           -DLsPlex_DEV=ON
           -DLsPlex_USE_SANITIZER=Address,Undefined
           -DLsPlex_USE_CCACHE=ON

    - name: Build
      env:
        VERBOSE: "1"
      run: |
           cmake --build build/sanitize -j 2

    - name: Test
      working-directory: build/sanitize
      env:
        ASAN_OPTIONS: "strict_string_checks=1:\
          detect_stack_use_after_return=1:\
          check_initialization_order=1:\
          strict_init_order=1:\
          detect_leaks=1:\
          halt_on_error=1"
        UBSAN_OPTIONS: "print_stacktrace=1:\
          halt_on_error=1"
      run: ctest --output-on-failure --no-tests=error -j 2

  test:
    strategy:
      matrix:
        os: [macos-14, ubuntu-22.04, windows-2022]

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - uses: ./.github/actions/apt-install
      if: matrix.os == 'ubuntu-22.04'

    - uses: ./.github/actions/conan

    - name: Setup MultiToolTask
      if: matrix.os == 'windows-2022'
      shell: pwsh
      run: |
        Add-Content "$env:GITHUB_ENV" 'UseMultiToolTask=true'
        Add-Content "$env:GITHUB_ENV" 'EnforceProcessCountAcrossBuilds=true'

    - name: Configure (windows-2022)
      if: matrix.os == 'windows-2022'
      shell: bash
      env:
        # cl.exe doesn't like newlines in its hefty flag lunch
        LOTSAFLAGS: >-
                 /sdl /guard:cf /utf-8 /diagnostics:caret /w14165
                 /w44242 /w44254 /w44263 /w34265 /w34287 /w44296
                 /w44365 /w44388 /w44464 /w14545 /w14546 /w14547
                 /w14549 /w14555 /w34619 /w34640 /w24826 /w14905
                 /w14906 /w14928 /w45038 /W4 /permissive-
                 /volatile:iso /Zc:inline /Zc:preprocessor
                 /Zc:enumTypes /Zc:lambda /Zc:__cplusplus
                 /Zc:externConstexpr /Zc:throwingNew /EHsc
      run: >-
           cmake -B build
           -G "Visual Studio 17 2022"
           -DCMAKE_TOOLCHAIN_FILE="conan/conan_toolchain.cmake"
           -DLsPlex_USE_CCACHE=ON
           -DCMAKE_CONFIGURATION_TYPES=Release
           -DLsPlex_DEV=ON
           -DCMAKE_CXX_FLAGS="${LOTSAFLAGS}"
           -DCMAKE_EXE_LINKER_FLAGS="/machine:x64 /guard:cf"

    - name: Configure (macos-14)
      if: matrix.os == 'macos-14'
      run: >-
           cmake -B build
           -G "Xcode"
           -DCMAKE_TOOLCHAIN_FILE=conan/conan_toolchain.cmake
           -DLsPlex_USE_CCACHE=ON
           -DCMAKE_CONFIGURATION_TYPES=Release
           -DLsPlex_DEV=ON
           -DCMAKE_CXX_FLAGS="-fstack-protector-strong -Wall -Wextra -Wpedantic
                              -Wconversion -Wsign-conversion -Wcast-qual
                              -Wformat=2 -Wundef -Werror=float-equal -Wshadow
                              -Wcast-align -Wunused -Wnull-dereference
                              -Wdouble-promotion -Wimplicit-fallthrough
                              -Wextra-semi -Woverloaded-virtual
                              -Wnon-virtual-dtor -Wold-style-cast"

    - name: Configure (ubuntu-22.04)
      if: matrix.os == 'ubuntu-22.04'
      run: >-
           cmake -B build
           -G "Unix Makefiles"
           -DCMAKE_TOOLCHAIN_FILE=conan/conan_toolchain.cmake
           -DCMAKE_BUILD_TYPE=Release
           -DLsPlex_USE_CCACHE=ON
           -DCMAKE_CONFIGURATION_TYPES=Release
           -DLsPlex_DEV=ON

    - name: Build
      run: cmake --build build --config Release -j 2

    - name: Install
      run: cmake --install build --config Release --prefix /tmp/daprefix

    - name: Test
      working-directory: build
      run: ctest --output-on-failure --no-tests=error -C Release -j 2

  docs:
    # Deploy docs only when builds succeed
    needs: [sanitize, test]

    runs-on: ubuntu-22.04

    # To enable, first you have to create an orphaned gh-pages branch:
    #
    #    git switch --orphan gh-pages
    #    git commit --allow-empty -m "Initial commit"
    #    git push -u origin gh-pages

    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
        cache-dependency-path: .github/etc/requirements.txt

    - name: Install m.css dependencies
      run: pip3 install jinja2 Pygments

    - name: Install Doxygen
      run: sudo apt-get update -q
        && sudo apt-get install doxygen -q -y

    - name: Build docs
      run: |
        cmake -DLsPlex_DOCS=SKIP_OTHER_TARGETS -S. -B /tmp/docbuild
        cmake --build /tmp/docbuild --target LsPlexDocs

    - name: Deploy docs
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: /tmp/docbuild/doc/doxygen/html
